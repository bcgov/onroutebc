SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [permit].[ORBC_TRANSACTION] ADD CREDIT_ACCOUNT_ID int NULL;

IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [permit].[ORBC_TRANSACTION]  WITH CHECK ADD  CONSTRAINT [ORBC_TRANSACTION_CREDIT_ACCOUNT_ID_FK] FOREIGN KEY([CREDIT_ACCOUNT_ID])
REFERENCES [permit].[ORBC_CREDIT_ACCOUNT] ([CREDIT_ACCOUNT_ID])

IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [permit].[ORBC_TRANSACTION] CHECK CONSTRAINT [ORBC_TRANSACTION_CREDIT_ACCOUNT_ID_FK]

IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Foreign key to the ORBC_CREDIT_ACCOUNT table, represents the CREDIT_ACCOUNT assoicated at the time of transaction' , @level0type=N'SCHEMA',@level0name=N'permit', @level1type=N'TABLE',@level1name=N'ORBC_TRANSACTION', @level2type=N'COLUMN',@level2name=N'CREDIT_ACCOUNT_ID'


IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [permit].[ORBC_TRANSACTION_HIST] ADD CREDIT_ACCOUNT_ID int NULL;

IF @@ERROR <> 0 SET NOEXEC ON
GO
-- Alter trigger permit.ORBC_TXN_A_S_IUD_TR
PRINT N'Alter trigger permit.ORBC_TXN_A_S_IUD_TR'
GO
ALTER TRIGGER [permit].[ORBC_TXN_A_S_IUD_TR] ON permit.[ORBC_TRANSACTION] FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update [permit].[ORBC_TRANSACTION_HIST] set END_DATE_HIST = @curr_date where TRANSACTION_ID in (select TRANSACTION_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into [permit].[ORBC_TRANSACTION_HIST] ([TRANSACTION_ID], [CREDIT_ACCOUNT_ID], [TRANSACTION_APPROVED_DATE], [RECEIPT_ID], [TRANSACTION_TYPE], [PAYMENT_METHOD_TYPE], [PAYMENT_CARD_TYPE], [TOTAL_TRANSACTION_AMOUNT], [TRANSACTION_SUBMIT_DATE], [TRANSACTION_ORDER_NUMBER], [PG_TRANSACTION_ID], [PG_TRANSACTION_APPROVED], [PG_AUTH_CODE], [PG_TRANSACTION_CARD_TYPE], [PG_TRANSACTION_DATE], [PG_CVD_ID], [PG_PAYMENT_METHOD], [PG_MESSAGE_ID], [PG_MESSAGE_TEXT], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_USERID], [DB_CREATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], _TRANSACTION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [TRANSACTION_ID], [CREDIT_ACCOUNT_ID], [TRANSACTION_APPROVED_DATE], [RECEIPT_ID], [TRANSACTION_TYPE], [PAYMENT_METHOD_TYPE], [PAYMENT_CARD_TYPE], [TOTAL_TRANSACTION_AMOUNT], [TRANSACTION_SUBMIT_DATE], [TRANSACTION_ORDER_NUMBER], [PG_TRANSACTION_ID], [PG_TRANSACTION_APPROVED], [PG_AUTH_CODE], [PG_TRANSACTION_CARD_TYPE], [PG_TRANSACTION_DATE], [PG_CVD_ID], [PG_PAYMENT_METHOD], [PG_MESSAGE_ID], [PG_MESSAGE_TEXT], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_USERID], [DB_CREATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], (next value for [permit].[ORBC_TRANSACTION_H_ID_SEQ]) as [_TRANSACTION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC orbc_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter trigger permit.ORBC_TXN_I_S_U_TR
PRINT N'Alter trigger permit.ORBC_TXN_I_S_U_TR'
GO
ALTER TRIGGER [permit].[ORBC_TXN_I_S_U_TR] ON permit.[ORBC_TRANSACTION] INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TRANSACTION_ID = deleted.TRANSACTION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update [permit].[ORBC_TRANSACTION]
    set "TRANSACTION_TYPE" = inserted."TRANSACTION_TYPE",
      "CREDIT_ACCOUNT_ID" = inserted."CREDIT_ACCOUNT_ID",
      "RECEIPT_ID" = inserted."RECEIPT_ID",
      "PAYMENT_METHOD_TYPE" = inserted."PAYMENT_METHOD_TYPE",
      "PAYMENT_CARD_TYPE" = inserted."PAYMENT_CARD_TYPE",
      "TOTAL_TRANSACTION_AMOUNT" = inserted."TOTAL_TRANSACTION_AMOUNT",
      "TRANSACTION_SUBMIT_DATE" = inserted."TRANSACTION_SUBMIT_DATE",
      "TRANSACTION_APPROVED_DATE" = inserted."TRANSACTION_APPROVED_DATE",
      "TRANSACTION_ORDER_NUMBER" = inserted."TRANSACTION_ORDER_NUMBER",
      "PG_TRANSACTION_ID" = inserted."PG_TRANSACTION_ID",
      "PG_TRANSACTION_APPROVED" = inserted."PG_TRANSACTION_APPROVED",
      "PG_AUTH_CODE" = inserted."PG_AUTH_CODE",
      "PG_TRANSACTION_CARD_TYPE" = inserted."PG_TRANSACTION_CARD_TYPE",
      "PG_TRANSACTION_DATE" = inserted."PG_TRANSACTION_DATE",
      "PG_CVD_ID" = inserted."PG_CVD_ID",
      "PG_PAYMENT_METHOD" = inserted."PG_PAYMENT_METHOD",
      "PG_MESSAGE_ID" = inserted."PG_MESSAGE_ID",
      "PG_MESSAGE_TEXT" = inserted."PG_MESSAGE_TEXT",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from [permit].[ORBC_TRANSACTION]
    inner join inserted
    on (ORBC_TRANSACTION.TRANSACTION_ID = inserted.TRANSACTION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC orbc_error_handling
END CATCH;
GO

IF @@ERROR <> 0 SET NOEXEC ON
GO
DISABLE TRIGGER [permit].[ORBC_TXN_I_S_U_TR] ON permit.[ORBC_TRANSACTION]
GO


GO

DECLARE @VersionDescription VARCHAR(255)
SET @VersionDescription = 'Add CREDIT_ACCOUNT_ID to ORBC_TRANSACTION and ORBC_TRANSACTION_HIST'

INSERT [dbo].[ORBC_SYS_VERSION] ([VERSION_ID], [DESCRIPTION], [UPDATE_SCRIPT], [REVERT_SCRIPT], [RELEASE_DATE]) VALUES (85, @VersionDescription, '$(UPDATE_SCRIPT)', '$(REVERT_SCRIPT)', getutcdate())
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
