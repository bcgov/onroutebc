SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO

IF @@ERROR <> 0 SET NOEXEC ON
GO
-- Create computed column for clean permit numbers
ALTER TABLE permit.ORBC_PERMIT
ADD COMPUTED_PERMIT_NUMBER AS CAST(REPLACE(PERMIT_NUMBER, '-', '') AS VARCHAR(19)) PERSISTED;

IF @@ERROR <> 0 SET NOEXEC ON
GO
-- Create index on computed column
CREATE NONCLUSTERED INDEX IX_ORBC_PERMIT_COMPUTED_PERMIT_NUMBER
ON permit.ORBC_PERMIT (COMPUTED_PERMIT_NUMBER);


IF @@ERROR <> 0 SET NOEXEC ON
GO
-- Create computed column for clean tps permit numbers
ALTER TABLE permit.ORBC_PERMIT
ADD COMPUTED_TPS_PERMIT_NUMBER AS CAST(REPLACE(TPS_PERMIT_NUMBER, '-', '') AS NVARCHAR(11)) PERSISTED;

IF @@ERROR <> 0 SET NOEXEC ON
GO
-- Create index on computed column
CREATE NONCLUSTERED INDEX IX_ORBC_PERMIT_COMPUTED_TPS_PERMIT_NUMBER
ON permit.ORBC_PERMIT (COMPUTED_TPS_PERMIT_NUMBER);


IF @@ERROR <> 0 SET NOEXEC ON
GO

DECLARE @VersionDescription VARCHAR(255)
SET @VersionDescription = 'Computed columns and corresponding indexes on the permit.ORBC_PERMIT table with PERMIT_NUMBER and TPS_PERMIT_NUMBER columns'

INSERT [dbo].[ORBC_SYS_VERSION] ([VERSION_ID], [DESCRIPTION], [UPDATE_SCRIPT], [REVERT_SCRIPT], [RELEASE_DATE]) VALUES (81, @VersionDescription, '$(UPDATE_SCRIPT)', '$(REVERT_SCRIPT)', getutcdate())
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO