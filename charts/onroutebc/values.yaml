---
global:
  env: {}
  autoscaling: true
  license: "c28f0c"
  podAnnotations: |
    app.kubernetes.io/timestamp: {{now | toString }}
  repository: bcgov/onroutebc # the repository where the images are stored.
  registry: ghcr.io # the registry where the images are stored. override during runtime for other registry at global level or individual level.
  tag: latest # global tag for deployments where each service is using images at the same tag (dev,tet,prod,latest,etc)
  zone: dev # Deployment zone - dev/test/prod
  secrets:
    annotation:
      helm.sh/policy: "keep"
  # The image registry of OpenShift. It is used in conjunction with ImageStreams which is a OpenShift specific resource.
  openshiftImageRegistry: "image-registry.openshift-image-registry.svc:5000"
  #enable pulling from image streams
  imagestreams:
    enabled: false
  domain: "apps.silver.devops.gov.bc.ca" # it is required, apps.silver.devops.gov.bc.ca for silver cluster
  vault:
    role: "nonprod"
    zone: "dev"
frontend:
  enabled: true
  deployment: # can be either a statefulSet or a deployment not both
    enabled: true
  statefulSet: # can be either a statefulSet or a deployment not both
    enabled: false
  secret:
    enabled: false
  configmap:
    enabled: true
    data:
      ACCESS_API_URL: "https://{{.Release.Name}}-vehicles.apps.silver.devops.gov.bc.ca"
      POLICY_URL: "https://{{.Release.Name}}-policy.apps.silver.devops.gov.bc.ca"
      DEPLOY_ENVIRONMENT: "{{.Values.global.vault.zone}}"
      PR_NUM: "{{.Values.global.env.pr_num}}"
      RELEASE_NUM: "{{.Values.global.env.release_num}}"
      config.js.template: |-
        const envConfig = (() => { return {
            "VITE_DEPLOY_ENVIRONMENT":"$DEPLOY_ENVIRONMENT",
            "VITE_API_VEHICLE_URL":"$ACCESS_API_URL",
            "VITE_POLICY_URL":"$POLICY_URL",
            "VITE_KEYCLOAK_ISSUER_URL":"$KEYCLOAK_ISSUER_URL",
            "VITE_KEYCLOAK_AUDIENCE":"$KEYCLOAK_AUDIENCE",
            "VITE_SITEMINDER_LOG_OFF_URL":"$SITEMINDER_LOG_OFF_URL",
            "VITE_PR_NUM":"$PR_NUM",
            "VITE_RELEASE_NUM":"$RELEASE_NUM",
            "VITE_BC_GEOCODER_CLIENT_ID":"$VITE_BC_GEOCODER_CLIENT_ID",
            "VITE_BC_GEOCODER_API_KEY":"$VITE_BC_GEOCODER_API_KEY",
            "VITE_BC_GEOCODER_API_URL":"$VITE_BC_GEOCODER_API_URL",
          };
        })();
  containers:
    - name: frontend
      command:
        - "sh"
        - "-c"
        - "source /vault/secrets/keycloak-{{.Values.global.vault.zone}} && envsubst < /usr/share/nginx/html/config/config.js.template > /usr/share/nginx/html/config/config.js && nginx -g 'daemon off;'"
      registry: '{{ .Values.global.registry }}'
      repository: '{{ .Values.global.repository }}' # example, it includes registry and repository
      image: frontend
      tag: "{{tpl .Values.global.tag .}}"
      env: 
        fromLocalConfigmap: 
          - name: ACCESS_API_URL
            key: ACCESS_API_URL
          - name: POLICY_URL
            key: POLICY_URL            
          - name: DEPLOY_ENVIRONMENT
            key: DEPLOY_ENVIRONMENT
        fromValues: 
          - name: TIMESTAMP
            value: "{{ now | toString }}"
          - name: PR_NUM
            value: "{{ .Values.global.env.pr_num | toString }}"
          - name: RELEASE_NUM
            value: "{{ .Values.global.env.release_num | toString }}"
      ports:
        - name: http
          containerPort: 3000
          protocol: TCP
      resources: # this is optional
        limits:
          cpu: 75m
          memory: 150Mi
        requests:
          cpu: 25m
          memory: 50Mi
      volumeMounts:
        - name: config
          mountPath: "/usr/share/nginx/html/config/config.js.template"
          subPath: config.js.template
        - name: writespace
          mountPath: "/usr/share/nginx/html/config"
  autoscaling:
    #-- enable or disable autoscaling.
    enabled: true
    #-- the minimum number of replicas.
    minReplicas: 2
    #-- the maximum number of replicas.
    maxReplicas: 3
    #-- the target cpu utilization percentage, is from request cpu and NOT LIMIT CPU.
    targetCPUUtilizationPercentage: 80
    #-- the behavior for the autoscaling. it is optional and is an object.
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Percent
            value: 10
            periodSeconds: 60
          - type: Pods
            value: 2
            periodSeconds: 60
        selectPolicy: Min
      scaleUp:
        stabilizationWindowSeconds: 0
        policies:
          - type: Percent
            value: 100
            periodSeconds: 30
          - type: Pods
            value: 2
            periodSeconds: 30
        selectPolicy: Max

  ingress:
    className: openshift-default
    annotations: 
      route.openshift.io/termination: "edge"
    enabled: true
    hosts: 
      - host: "{{.Release.Name}}-frontend.apps.silver.devops.gov.bc.ca"
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - {}
  service:
    enabled: true
    type: ClusterIP
    ports:
      - name: 3000-tcp
        protocol: TCP
        port: 80
        targetPort: 3000
  serviceAccount:
    name: "{{ .Values.global.license }}-vault"
  vault:
    enabled: true
    resources: # this is optional
      limits:
        cpu: 100m
        memory: 200Mi
      requests:
        cpu: 75m
        memory: 100Mi
    role: "{{.Values.global.vault.role}}"
    license: "{{.Values.global.license}}"
    secretPaths:
      - "keycloak-{{tpl $.Values.vault.zone $}}"
    zone: "{{.Values.global.vault.zone}}"
  volumes:
    - name: config
      configMap:
        name: "{{ .Release.Name}}-frontend"
    - name: writespace
      emptyDir:
        sizeLimit: 50Mi

vehicles:
  enabled: true
  deployment: # can be either a statefulSet or a deployment not both
    enabled: true
  statefulSet: # can be either a statefulSet or a deployment not both
    enabled: false
  secret:
    enabled: false
  configmap:
    enabled: true
    data:
      DOPS_URL: "https://{{.Release.Name}}-dops.apps.silver.devops.gov.bc.ca"
      POLICY_URL: "https://{{.Release.Name}}-policy.apps.silver.devops.gov.bc.ca"
      FRONTEND_URL: "https://{{.Release.Name}}-frontend.apps.silver.devops.gov.bc.ca"      
      ACCESS_API_URL: "https://{{.Release.Name}}-vehicles.apps.silver.devops.gov.bc.ca"
      PAYBC_REDIRECT: "https://{{.Release.Name}}-frontend.apps.silver.devops.gov.bc.ca/payment"
  containers:
    - name: vehicles
      command:
        - "sh"
        - "-c"
        - "source /vault/secrets/keycloak-{{.Values.global.vault.zone}} && source /vault/secrets/mssql-{{.Values.global.vault.zone}} && source /vault/secrets/payment-{{.Values.global.vault.zone}} && source /vault/secrets/vehicles-{{.Values.global.vault.zone}} && source /vault/secrets/cfs-{{.Values.global.vault.zone}} && npm run start:prod"
      registry: '{{ .Values.global.registry }}'
      repository: '{{ .Values.global.repository }}' # example, it includes registry and repository
      image: vehicles
      tag: "{{tpl .Values.global.tag .}}"
      env:
        fromLocalConfigmap: 
          - name: DOPS_URL 
            key: DOPS_URL
          - name: POLICY_URL 
            key: POLICY_URL            
          - name: FRONTEND_URL
            key: FRONTEND_URL
          - name: ACCESS_API_URL
            key: ACCESS_API_URL
          - name: PAYBC_REDIRECT
            key: PAYBC_REDIRECT
        fromValues:
          - name: TIMESTAMP
            value: "{{ now | toString }}"
          - name: PR_NUM
            value: "{{ .Values.global.env.pr_num | toString }}"
          - name: RELEASE_NUM
            value: "{{ .Values.global.env.release_num | toString }}"
      ports:
        - name: vehicles-api
          containerPort: 5000
          protocol: TCP
      readinessProbe:
        httpGet:
          path: /
          port: 5000
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 15
        timeoutSeconds: 5
      livenessProbe:
        successThreshold: 1
        failureThreshold: 3
        httpGet:
          path: /
          port: 5000
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 30
        timeoutSeconds: 5
      resources: # this is optional
        limits:
          cpu: 300m
          memory: 500Mi
        requests:
          cpu: 200m
          memory: 300Mi
  autoscaling:
    #-- enable or disable autoscaling.
    enabled: true
    #-- the minimum number of replicas.
    minReplicas: 2
    #-- the maximum number of replicas.
    maxReplicas: 3
    #-- the target cpu utilization percentage, is from request cpu and NOT LIMIT CPU.
    targetCPUUtilizationPercentage: 80
    #-- the behavior for the autoscaling. it is optional and is an object.
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Percent
            value: 10
            periodSeconds: 60
          - type: Pods
            value: 2
            periodSeconds: 60
        selectPolicy: Min
      scaleUp:
        stabilizationWindowSeconds: 0
        policies:
          - type: Percent
            value: 100
            periodSeconds: 30
          - type: Pods
            value: 2
            periodSeconds: 30
        selectPolicy: Max
  ingress:
    className: openshift-default
    annotations: 
      haproxy.router.openshift.io/timeout: 2m
      route.openshift.io/termination: "edge"
    enabled: true
    hosts: 
      - host: "{{.Release.Name}}-vehicles.apps.silver.devops.gov.bc.ca"
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - {}
  service:
    enabled: true
    type: ClusterIP
    ports:
      - name: 5000-tcp
        protocol: TCP
        port: 80
        targetPort: 5000
  serviceAccount:
    name: "{{ .Values.global.license }}-vault"
  vault:
    enabled: true
    resources: # this is optional
      limits:
        cpu: 100m
        memory: 200Mi
      requests:
        cpu: 75m
        memory: 100Mi
    role: "{{.Values.global.vault.role}}"
    license: "{{.Values.global.license}}"
    secretPaths:
      - "keycloak-{{tpl $.Values.vault.zone $}}"
      - "mssql-{{tpl $.Values.vault.zone $}}"
      - "payment-{{tpl $.Values.vault.zone $}}"
      - "vehicles-{{tpl $.Values.vault.zone $}}"
      - "cfs-{{tpl $.Values.vault.zone $}}"
    zone: "{{.Values.global.vault.zone}}"

dops:
  enabled: true
  deployment: # can be either a statefulSet or a deployment not both
    enabled: true
  statefulSet: # can be either a statefulSet or a deployment not both
    enabled: false
  secret:
    enabled: false
  configmap:
    enabled: true
    data:
      DOPS_URL: "https://{{.Release.Name}}-dops.apps.silver.devops.gov.bc.ca"
      FRONTEND_URL: "https://{{.Release.Name}}-frontend.apps.silver.devops.gov.bc.ca"
      ACCESS_API_URL: "https://{{.Release.Name}}-vehicles.apps.silver.devops.gov.bc.ca"
  containers:
    - name: dops
      command:
        - "/usr/local/bin/dumb-init"
        - "--"
        - "sh"
        - "-c"
        - "source /vault/secrets/keycloak-{{.Values.global.vault.zone}} && source /vault/secrets/mssql-{{.Values.global.vault.zone}} && source /vault/secrets/ches-{{.Values.global.vault.zone}} && source /vault/secrets/cdogs-{{.Values.global.vault.zone}} && source /vault/secrets/dops-{{.Values.global.vault.zone}} && source /vault/secrets/s3-{{.Values.global.vault.zone}} && npm run start:prod"
      registry: '{{ .Values.global.registry }}'
      repository: '{{ .Values.global.repository }}' # example, it includes registry and repository
      image: dops
      tag: "{{tpl .Values.global.tag .}}"
      env:
        fromLocalConfigmap:
          - name: DOPS_URL
            key: DOPS_URL
          - name: FRONTEND_URL
            key: FRONTEND_URL
          - name: ACCESS_API_URL
            key: ACCESS_API_URL
        fromValues:
          - name: TIMESTAMP
            value: "{{ now | toString }}"
          - name: PR_NUM
            value: "{{ .Values.global.env.pr_num | toString }}"
          - name: RELEASE_NUM
            value: "{{ .Values.global.env.release_num | toString }}"
      ports:
        - name: dops-api
          containerPort: 5001
          protocol: TCP
      readinessProbe:
        httpGet:
          path: /
          port: 5001
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 15
        timeoutSeconds: 5
      livenessProbe:
        successThreshold: 1
        failureThreshold: 3
        httpGet:
          path: /
          port: 5001
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 30
        timeoutSeconds: 5
      resources: # this is optional
        limits:
          cpu: 2000m
          memory: 4000Mi
        requests:
          cpu: 1000m
          memory: 2000Mi
  autoscaling:
    #-- enable or disable autoscaling.
    enabled: true
    #-- the minimum number of replicas.
    minReplicas: 2
    #-- the maximum number of replicas.
    maxReplicas: 3
    #-- the target cpu utilization percentage, is from request cpu and NOT LIMIT CPU.
    targetCPUUtilizationPercentage: 80
    #-- the behavior for the autoscaling. it is optional and is an object.
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Percent
            value: 10
            periodSeconds: 60
          - type: Pods
            value: 2
            periodSeconds: 60
        selectPolicy: Min
      scaleUp:
        stabilizationWindowSeconds: 0
        policies:
          - type: Percent
            value: 100
            periodSeconds: 30
          - type: Pods
            value: 2
            periodSeconds: 30
        selectPolicy: Max
  ingress:
    className: openshift-default
    annotations: 
      haproxy.router.openshift.io/timeout: 2m
      route.openshift.io/termination: "edge"
    enabled: true
    hosts: 
      - host: "{{.Release.Name}}-dops.apps.silver.devops.gov.bc.ca"
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - {}
  service:
    enabled: true
    type: ClusterIP
    ports:
      - name: 5001-tcp
        protocol: TCP
        port: 80
        targetPort: 5001
  serviceAccount:
    name: "{{ .Values.global.license }}-vault"
  vault:
    enabled: true
    resources: # this is optional
      limits:
        cpu: 100m
        memory: 200Mi
      requests:
        cpu: 75m
        memory: 100Mi
    role: "{{.Values.global.vault.role}}"
    license: "{{.Values.global.license}}"
    secretPaths:
      - "keycloak-{{tpl $.Values.vault.zone $}}"
      - "mssql-{{tpl $.Values.vault.zone $}}"
      - "ches-{{tpl $.Values.vault.zone $}}"
      - "cdogs-{{tpl $.Values.vault.zone $}}"
      - "dops-{{tpl $.Values.vault.zone $}}"
      - "s3-{{tpl $.Values.vault.zone $}}"
    zone: "{{.Values.global.vault.zone}}"

scheduler:
  enabled: true
  deployment: # can be either a statefulSet or a deployment not both
    enabled: true
  statefulSet: # can be either a statefulSet or a deployment not both
    enabled: false
  secret:
    enabled: false
  configmap:
    enabled: true
    data:
      ACCESS_API_URL: "https://{{.Release.Name}}-vehicles.apps.silver.devops.gov.bc.ca"
  containers:
    - name: scheduler
      command:
        - "sh"
        - "-c"
        - "source /vault/secrets/keycloak-{{.Values.global.vault.zone}} && source /vault/secrets/mssql-{{.Values.global.vault.zone}} && source /vault/secrets/s3-{{.Values.global.vault.zone}} && source /vault/secrets/scheduler-{{.Values.global.vault.zone}} && source /vault/secrets/cfs-{{.Values.global.vault.zone}} && source /vault/secrets/tps-{{.Values.global.vault.zone}} && npm run start:prod"
      registry: '{{ .Values.global.registry }}'
      repository: '{{ .Values.global.repository }}' # example, it includes registry and repository
      image: scheduler
      tag: "{{tpl .Values.global.tag .}}"
      env: 
        fromLocalConfigmap:
          - name: ACCESS_API_URL
            key: ACCESS_API_URL
        fromValues:
          - name: TIMESTAMP
            value: "{{ now | toString }}"
          - name: PR_NUM
            value: "{{ .Values.global.env.pr_num | toString }}"
          - name: RELEASE_NUM
            value: "{{ .Values.global.env.release_num | toString }}"
      ports:
        - name: scheduler
          containerPort: 5050
          protocol: TCP
      readinessProbe:
        httpGet:
          path: /
          port: 5050
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 15
        timeoutSeconds: 5
      livenessProbe:
        successThreshold: 1
        failureThreshold: 3
        httpGet:
          path: /
          port: 5050
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 30
        timeoutSeconds: 5
      securityContext:
        allowPrivilegeEscalation: true
      resources: # this is optional
        limits:
          cpu: 75m
          memory: 150Mi
        requests:
          cpu: 25m
          memory: 50Mi
  autoscaling:
    #-- enable or disable autoscaling.
    enabled: false 
  ingress:
    className: openshift-default
    annotations: 
      route.openshift.io/termination: "edge"
    enabled: true
    hosts: 
      - host: "{{.Release.Name}}-scheduler.apps.silver.devops.gov.bc.ca"
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - {}
  service:
    enabled: true
    type: ClusterIP
    ports:
      - name: 5050-tcp
        protocol: TCP
        port: 80
        targetPort: 5050
  serviceAccount:
    name: "{{ .Values.global.license }}-vault"
  vault:
    enabled: true
    resources: # this is optional
      limits:
        cpu: 100m
        memory: 200Mi
      requests:
        cpu: 75m
        memory: 100Mi
    role: "{{.Values.global.vault.role}}"
    license: "{{.Values.global.license}}"
    secretPaths:
      - "keycloak-{{tpl $.Values.vault.zone $}}"
      - "mssql-{{tpl $.Values.vault.zone $}}"
      - "scheduler-{{tpl $.Values.vault.zone $}}"
      - "s3-{{tpl $.Values.vault.zone $}}"
      - "cfs-{{tpl $.Values.vault.zone $}}"
      - "tps-{{tpl $.Values.vault.zone $}}"
    zone: "{{.Values.global.vault.zone}}"

policy:
  enabled: true
  deployment: # can be either a statefulSet or a deployment not both
    enabled: true
  statefulSet: # can be either a statefulSet or a deployment not both
    enabled: false
  secret:
    enabled: false
  configmap:
    enabled: true
    data:
      FRONTEND_URL: "https://{{.Release.Name}}-frontend.apps.silver.devops.gov.bc.ca"
  containers:
    - name: policy
      command:
        - "sh"
        - "-c"
        - "source /vault/secrets/keycloak-{{.Values.global.vault.zone}} && source /vault/secrets/mssql-{{.Values.global.vault.zone}} && source /vault/secrets/policy-{{.Values.global.vault.zone}} && npm run start:prod"
      registry: '{{ .Values.global.registry }}'
      repository: '{{ .Values.global.repository }}' # example, it includes registry and repository
      image: policy
      tag: "{{tpl .Values.global.tag .}}"
      env:
        fromLocalConfigmap:
          - name: FRONTEND_URL
            key: FRONTEND_URL
        fromValues:
          - name: TIMESTAMP
            value: "{{ now | toString }}"
          - name: PR_NUM
            value: "{{ .Values.global.env.pr_num | toString }}"
          - name: RELEASE_NUM
            value: "{{ .Values.global.env.release_num | toString }}"
      ports:
        - name: policy-api
          containerPort: 5002
          protocol: TCP
      readinessProbe:
        httpGet:
          path: /
          port: 5002
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 15
        timeoutSeconds: 5
      livenessProbe:
        successThreshold: 1
        failureThreshold: 3
        httpGet:
          path: /
          port: 5002
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 30
        timeoutSeconds: 5
      resources: # this is optional
        limits:
          cpu: 75m
          memory: 150Mi
        requests:
          cpu: 25m
          memory: 50Mi
  autoscaling:
    #-- enable or disable autoscaling.
    enabled: true
    #-- the minimum number of replicas.
    minReplicas: 2
    #-- the maximum number of replicas.
    maxReplicas: 3
    #-- the target cpu utilization percentage, is from request cpu and NOT LIMIT CPU.
    targetCPUUtilizationPercentage: 80
    #-- the behavior for the autoscaling. it is optional and is an object.
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Percent
            value: 10
            periodSeconds: 60
          - type: Pods
            value: 2
            periodSeconds: 60
        selectPolicy: Min
      scaleUp:
        stabilizationWindowSeconds: 0
        policies:
          - type: Percent
            value: 100
            periodSeconds: 30
          - type: Pods
            value: 2
            periodSeconds: 30
        selectPolicy: Max
  ingress:
    className: openshift-default
    annotations:
      route.openshift.io/termination: "edge"
    enabled: true
    hosts: 
      - host: "{{.Release.Name}}-policy.apps.silver.devops.gov.bc.ca"
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - {}
  service:
    enabled: true
    type: ClusterIP
    ports:
      - name: 5002-tcp
        protocol: TCP
        port: 80
        targetPort: 5002
  serviceAccount:
    name: "{{ .Values.global.license }}-vault"
  vault:
    enabled: true
    resources: # this is optional
      limits:
        cpu: 100m
        memory: 200Mi
      requests:
        cpu: 75m
        memory: 100Mi
    role: "{{.Values.global.vault.role}}"
    license: "{{.Values.global.license}}"
    secretPaths:
      - "keycloak-{{tpl $.Values.vault.zone $}}"
      - "mssql-{{tpl $.Values.vault.zone $}}"      
      - "policy-{{tpl $.Values.vault.zone $}}"
    zone: "{{.Values.global.vault.zone}}"
